# name: test/sql/join/pathfinding/test_path_finding.test
# description: Prototype the path finding operator
# group: [path-finding]

#statement ok
#PRAGMA enable_verification

require duckpgq

statement ok
CREATE TABLE pairs(src BIGINT, dst BIGINT); INSERT INTO pairs(src, dst) VALUES (0, 1), (1, 2), (2,0);

statement ok
create table student(id INT); INSERT INTO student(id) VALUES (10), (20), (30), (40);

statement ok
create table knows(src INT, dst INT); INSERT INTO knows(src, dst) VALUES (40, 20), (10,30), (10,10), (20,10), (20,30), (30,10);

#query II
#SELECT *
#FROM knows AS a, pairs AS b
#WHERE (cos(a.src) BETWEEN cos(b.dst) AND cos(b.src));
#----

statement ok
-CREATE PROPERTY GRAPH pg
VERTEX TABLES (
student
)
EDGE TABLES (
knows   SOURCE KEY (src) REFERENCES student (id)
        DESTINATION KEY (dst) references student (id)
);

#statement ok
#-FROM GRAPH_TABLE(pg
#    MATCH (f:student)-[k:knows]->{0,3}(f2:student)
#    COLUMNS (*)
#    );

query II
SELECT *
FROM pairs AS p
WHERE p.src BETWEEN (SELECT CREATE_CSR_EDGE(
            (SELECT count(a.id) as v_size FROM Student a),
            (SELECT count(k.src) as e_size from knows k),
            a.rowid,
            c.rowid,
            k.rowid,
            t.cnt)    FROM Knows k
                        JOIN student a on a.id = k.src
                        JOIN student c on c.id = k.dst
                        JOIN (SELECT count(k.src) cnt, a.rowid as a_rowid
                                FROM student a
                                LEFT JOIN knows k ON k.src = a.id
                                GROUP BY a.rowid) t
                            ON t.a_rowid = a.rowid) AND p.dst;
----


#            CAST (
#                (SELECT sum(CREATE_CSR_VERTEX(0,
#                    (SELECT count(a.id) FROM Student a),
#                      sub.dense_id,
#                      sub.cnt)
#                )
#                FROM (
#                    SELECT a.rowid as dense_id, count(k.src) as cnt
#                    FROM Student a
#                    LEFT JOIN Knows k ON k.src = a.id
#                    GROUP BY a.rowid) sub
#            ) AS BIGINT),


#statement ok
#SELECT *
#FROM pairs AS p
#WHERE (p.src, p.dst) BETWEEN (
#            SELECT (csr_id, 0) FROM (SELECT 0 as csr_id,
#            (SELECT count(a.id) FROM Student a),
#            0,
#            a.rowid,
#            c.rowid,
#            k.rowid    FROM Knows k
#                        JOIN student a on a.id = k.src
#                        JOIN student c on c.id = k.dst)) AND (0, 3);

#CAST (
#                (SELECT sum(CREATE_CSR_VERTEX(0,
#                    (SELECT count(a.id) FROM Student a),
#                      sub.dense_id,
#                      sub.cnt)
#                )
#                FROM (
#                    SELECT a.rowid as dense_id, count(k.src) as cnt
#                    FROM Student a
#                    LEFT JOIN Knows k ON k.src = a.id
#                    GROUP BY a.rowid) sub
#            ) AS BIGINT),
#statement ok
#select 1;
# LHS of IEJOIN
# RHS of IEJoin
# 0,
#            (SELECT count(a.id) FROM Student a),
#            CAST (
#                (SELECT sum(CREATE_CSR_VERTEX(
#                            0,
#                            (SELECT count(a.id) FROM Student a),
#                            sub.dense_id,
#                            sub.cnt)
#                            )
#                FROM (
#                    SELECT a.rowid as dense_id, count(k.src) as cnt
#                    FROM Student a
#                    LEFT JOIN Know k ON k.src = a.id
#                    GROUP BY a.rowid) sub
#                )
#            AS BIGINT),
#            a.rowid,
#            c.rowid,
#            k.rowid