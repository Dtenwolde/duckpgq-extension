# name: test/sql/join/pathfinding/test_path_finding.test
# description: Prototype the path finding operator
# group: [path-finding]

#statement ok
#PRAGMA enable_verification

require duckpgq

statement ok
set experimental_path_finding_operator=true;

statement ok
CREATE TABLE pair(src BIGINT, dst BIGINT); INSERT INTO pair(src, dst) VALUES (0, 1), (1, 2), (2,0);

statement ok
create table student(id INT); INSERT INTO student(id) VALUES (10), (20), (30), (40);

statement ok
create table know(src INT, dst INT); INSERT INTO know(src, dst) VALUES (40, 20), (10,30), (10,10), (20,10), (30,10);

query III
SELECT *, shortestpath(src, dst, 'pair') as path
FROM pair AS p
WHERE p.src BETWEEN (SELECT CREATE_CSR_EDGE(0,
            (SELECT count(a.id) as v_size FROM Student a),
            (SELECT count(k.src) as e_size from know k),
              a.rowid,
              c.rowid,
              k.rowid,
              t.cnt)    FROM Know k
                          JOIN student a on a.id = k.src
                          JOIN student c on c.id = k.dst
                          JOIN (SELECT count(k.src) cnt, a.rowid as a_rowid
                                  FROM student a
                                 LEFT JOIN know k ON k.src = a.id
                                 GROUP BY a.rowid) t
                             ON t.a_rowid = a.rowid) AND p.dst;
----
0	1	NULL
1	2	[1, 3, 0, 1, 2]
2	0	[2, 4, 0]

statement ok
import database 'duckdb-pgq/data/SNB0.003';

statement ok
select setseed(0.42)

statement ok
CREATE OR REPLACE TABLE pairs2 AS (
    SELECT src, dst
    FROM (SELECT a.rowid AS src FROM Person a),
        (SELECT b.rowid AS dst FROM Person b)
    USING SAMPLE reservoir(2 ROWS) REPEATABLE (300)
);

query III
SELECT *, iterativelength(src, dst, 'pairs2') as length
FROM pairs2 AS p
WHERE p.src BETWEEN (SELECT CREATE_CSR_EDGE(0,
            (SELECT count(a.id) as v_size FROM Person a),
            (SELECT count(k.Person1Id) as e_size FROM Person_knows_Person k),
            a.rowid,
            c.rowid,
            k.rowid,
            t.cnt)    FROM Person_knows_Person k
                        JOIN Person a on a.id = k.Person1Id
                        JOIN Person c on c.id = k.Person2Id
                        JOIN (SELECT count(k.Person1Id) cnt, a.rowid as a_rowid
                                FROM Person a
                                LEFT JOIN Person_knows_Person k ON k.Person1Id = a.id
                                GROUP BY a.rowid) t
                            ON t.a_rowid = a.rowid) AND p.dst;
----
42	22	NULL
3	33	2

statement ok
CREATE OR REPLACE TABLE pairs3 AS (
    SELECT src, dst
    FROM (SELECT a.rowid AS src FROM Person a),
        (SELECT b.rowid AS dst FROM Person b)
    USING SAMPLE reservoir(1 ROWS) REPEATABLE (300)
);

query II
from pairs3;
----
10	2

query III
SELECT *, iterativelength(src, dst, 'pairs3') as length
FROM pairs3 as p
WHERE p.src BETWEEN (SELECT CREATE_CSR_EDGE(
            (SELECT count(a.id) as v_size FROM Person a),
            (SELECT count(k.Person1Id) as e_size FROM Person_knows_Person k),
            a.rowid,
            c.rowid,
            k.rowid,
            t.cnt)    FROM Person_knows_Person k
                        JOIN Person a on a.id = k.Person1Id
                        JOIN Person c on c.id = k.Person2Id
                        JOIN (SELECT count(k.Person1Id) cnt, a.rowid as a_rowid
                                FROM Person a
                                LEFT JOIN Person_knows_Person k ON k.Person1Id = a.id
                                GROUP BY a.rowid) t
                            ON t.a_rowid = a.rowid) AND p.dst;
----
10	2	NULL
