# name: test/sql/path_finding/parallel_path_finding.test
# description: Prototype the path finding operator
# group: [duckpgq_sql_path_finding]

#statement ok
#PRAGMA enable_verification

require duckpgq

statement ok
set experimental_path_finding_operator=true;

statement ok
SET scalar_subquery_error_on_multiple_rows=false;

statement ok
set disabled_optimizers = 'compressed_materialization';

query I
SELECT current_setting('experimental_path_finding_operator');
----
true

statement ok
CREATE TABLE pair(src BIGINT, dst BIGINT); INSERT INTO pair(src, dst) VALUES (0, 1), (1, 2), (2,0);

statement ok
create table student(id INT); INSERT INTO student(id) VALUES (10), (20), (30), (40);

statement ok
create table know(src INT, dst INT); INSERT INTO know(src, dst) VALUES (40, 20), (10,30), (10,10), (20,10), (30,10);

statement ok
-CREATE PROPERTY GRAPH g
VERTEX TABLES (student)
EDGE TABLES (know    SOURCE KEY ( src ) REFERENCES Student ( id )
                         DESTINATION KEY ( dst ) REFERENCES Student ( id )
                         );

query III
with csr_cte as (
SELECT cast(sum(create_csr_edge(
        0,
        (SELECT count(a.id) FROM Student a),
        CAST (
            (SELECT sum(create_csr_vertex(
                0,
                (SELECT count(a.id) FROM Student a),
                sub.dense_id,
                sub.cnt))
            FROM (
                SELECT a.rowid as dense_id, count(k.src) as cnt
                FROM Student a
                LEFT JOIN Know k ON k.src = a.id
                GROUP BY a.rowid) sub
            )
        AS BIGINT),
        (select count() FROM Know k JOIN student a on a.id = k.src JOIN student c on c.id = k.dst),
        a.rowid,
        c.rowid,
        k.rowid)) as bigint) as edge_count
    FROM Know k
    JOIN student a on a.id = k.src
    JOIN student c on c.id = k.dst)
SELECT shortestpathoperator(src, dst, edge_count) FROM pair, csr_cte;
----
0	1	NULL
1	2	[1, 3, 0, 1, 2]
2	0	[2, 4, 0]

query III
with shortestpath_cte as (
SELECT src, dst, shortestpathoperator(src, dst, 'pair') as path
FROM pair p where p.src between (SELECT CSR_OPERATOR_E(
                                    (SELECT count(a.id) FROM Student a),
                                    CAST (
                                        (SELECT CSR_OPERATOR_V(
                                            (SELECT count(a.id) FROM Student a),
                                            sub.dense_id,
                                            sub.cnt)
                                        FROM (
                                            SELECT a.rowid as dense_id, count(k.src) as cnt
                                            FROM Student a
                                            LEFT JOIN Know k ON k.src = a.id
                                            GROUP BY a.rowid) sub
                                        )
                                    AS BIGINT),
                                    (select count() FROM Know k JOIN student a on a.id = k.src JOIN student c on c.id = k.dst),
                                    a.rowid,
                                    c.rowid,
                                    k.rowid)
                                FROM Know k
                                JOIN student a on a.id = k.src
                                JOIN student c on c.id = k.dst) and p.dst)
select * from shortestpath_cte;
----
0	1	NULL
1	2	[1, 3, 0, 1, 2]
2	0	[2, 4, 0]



#query III
#WITH shortestpath_cte as (
#SELECT src, dst, shortestpathoperator(src, dst, 'pair') as path
#FROM pair p
#WHERE p.src between (SELECT CSR_OPERATOR_E(
#                                CSR_OPERATOR_V(
#                                    (SELECT count(a.id) as v_size FROM Student a),
#                                    (SELECT count(k.src) as e_size from know k),
#                                    sub.cnt, sub.a_rowid from
#                                        (select count(k.src) cnt, a.rowid as a_rowid
#                                        FROM student a
#                                        LEFT JOIN know k ON k.src = a.id
#                                        GROUP BY a.rowid)
#                                ),
#                              a.rowid,
#                               c.rowid,
#                              k.rowid) FROM Know k
#                                           JOIN student a on a.id = k.src
#                                           JOIN student c on c.id = k.dst) and p.dst)
# SELECT * FROM shortestpath_cte;
#----
#0	1	NULL
#1	2	[1, 3, 0, 1, 2]
#2	0	[2, 4, 0]


#query III
#WITH shortestpath_cte as (
#SELECT src, dst, shortestpathoperator(src, dst, 'pair') as path
#FROM pair p
#WHERE p.src between (SELECT CSR_OPERATOR(
#                             (SELECT count(a.id) as v_size FROM Student a),
#                             (SELECT count(k.src) as e_size from know k),
#                               a.rowid,
#                               c.rowid,
#                               k.rowid,
#                               t.cnt) FROM Know k
#                                           JOIN student a on a.id = k.src
#                                           JOIN student c on c.id = k.dst
#                                           JOIN (SELECT count(k.src) cnt, a.rowid as a_rowid
#                                                   FROM student a
#                                                  LEFT JOIN know k ON k.src = a.id
#                                                  GROUP BY a.rowid) t
#                                              ON t.a_rowid = a.rowid) and p.dst)
# SELECT * FROM shortestpath_cte;
#----
#0	1	NULL
#1	2	[1, 3, 0, 1, 2]
#2	0	[2, 4, 0]

statement ok
import database 'duckdb/data/SNB0.003';

statement ok
-create property graph snb vertex tables (person)
edge tables (person_knows_person    source key (person1id) references person (id)
                                    destination key (person2id) references person (id));

statement ok
create table snb_pairs as (
    select src, dst
    from (select a.rowid as src from person a),
         (select b.rowid as dst from person b)
    using sample reservoir(2 rows) repeatable (300)
);


query III
WITH shortestpath_cte as (
SELECT src, dst, shortestpathoperator(src, dst, 'snb_pairs') as path
FROM snb_pairs p
WHERE p.src between (SELECT CSR_OPERATOR(
                             (SELECT count(a.id) as v_size FROM person a),
                             (SELECT count(k.person1id) as e_size from person_knows_person k),
                               a.rowid,
                               c.rowid,
                               k.rowid,
                               t.cnt) FROM person_knows_person k
                                           JOIN person a on a.id = k.person1id
                                           JOIN person c on c.id = k.person2id
                                           JOIN (SELECT count(k.person1id) cnt, a.rowid as a_rowid
                                                   FROM person a
                                                  LEFT JOIN person_knows_person k ON k.person1id = a.id
                                                  GROUP BY a.rowid) t
                                              ON t.a_rowid = a.rowid) and p.dst)
 SELECT * FROM shortestpath_cte;
----
0	1	NULL
1	2	[1, 3, 0, 1, 2]
2	0	[2, 4, 0]

#query III
#-FROM GRAPH_TABLE (g
#    MATCH p = ANY SHORTEST (src:Student WHERE src.id = 10)-[k:know]-> *(dst:Student)
#    COLUMNS (element_id(p) AS path, src.id, dst.id));
#----
#[0]	10	10
#[0, 1, 2]	10	30

#query III
#-FROM GRAPH_TABLE (g
#    MATCH p = ANY SHORTEST (src:Student)-[k:know]-> *(dst:Student where dst.id = 30)
#    COLUMNS (element_id(p) AS path, src.id, dst.id));
#----
#[0, 1, 2]	10	30
#[1, 3, 0, 1, 2]	20	30
#[2]	30	30
#[3, 0, 1, 3, 0, 1, 2]	40	30
#
#query III
#-FROM GRAPH_TABLE (g
#    MATCH p = ANY SHORTEST (src:Student)-[k:know]-> *(dst:Student where dst.id = 30)
#    COLUMNS (path_length(p) AS path, src.id, dst.id));
#----
#1	10	30
#2	20	30
#0	30	30
#3	40	30
#
#query IIIII
#-FROM GRAPH_TABLE (g
#    MATCH p = ANY SHORTEST (a:Student)-[k2:know]->(src:Student)-[k:know]-> *(dst:Student where dst.id = 30)
#    COLUMNS (a.id as a_id, element_id(p), path_length(p) AS path_length, src.id, dst.id))
#    ORDER BY  a_id, path_length
#----
#10	[0, 1, 2]	1	30	30
#10	[0, 2, 0, 1, 2]	2	10	30
#20	[1, 3, 0, 1, 2]	2	10	30
#30	[2, 4, 0, 1, 2]	2	10	30
#40	[3, 0, 1, 3, 0, 1, 2]	3	20	30



# MATCH ANY SHORTEST p = (a:Person)-[k2:knows]->(src:Person WHERE src.id = 10)-[k:knows]->*(dst:Person)
# COLUMNS (element_id(p) AS path)
#query IIIIII
#WITH pairs as (
#    SELECT src, dst
#    FROM (SELECT a.rowid AS src FROM Student a where id = 10),
#        (SELECT b.rowid AS dst FROM Student b)
#), shortestpath as (
#SELECT src, dst, shortestpathoperator(src, dst, 'pairs') as path
#FROM pairs p
#WHERE p.src between (SELECT CSR_OPERATOR(
#                             (SELECT count(a.id) as v_size FROM Student a),
#                             (SELECT count(k.src) as e_size from know k),
#                               a.rowid,
#                               c.rowid,
#                               k.rowid,
#                               t.cnt) FROM Know k
#                                           JOIN student a on a.id = k.src
#                                           JOIN student c on c.id = k.dst
#                                           JOIN (SELECT count(k.src) cnt, a.rowid as a_rowid
#                                                   FROM student a
#                                                  LEFT JOIN know k ON k.src = a.id
#                                                  GROUP BY a.rowid) t
#                                              ON t.a_rowid = a.rowid) and p.dst)
#SELECT a.id as a_id, src.id src_id, shortestpath.src as sp_src, shortestpath.dst as sp_dst, dst.id, path FROM shortestpath
#JOIN student src on shortestpath.src = src.rowid
#JOIN student dst on shortestpath.dst = dst.rowid
#JOIN know k2 on k2.dst = src.id
#JOIN student a on a.id = k2.src
#ORDER BY shortestpath.dst;
#----
#10	10	0	0	10	[0]
#20	10	0	0	10	[0]
#30	10	0	0	10	[0]
#10	10	0	1	20	NULL
#20	10	0	1	20	NULL
#30	10	0	1	20	NULL
#10	10	0	2	30	[0, 1, 2]
#20	10	0	2	30	[0, 1, 2]
#30	10	0	2	30	[0, 1, 2]
#10	10	0	3	40	NULL
#20	10	0	3	40	NULL
#30	10	0	3	40	NULL

#query IIII
#WITH pairs as (
#    SELECT src, dst
#    FROM (SELECT a.rowid AS src FROM Student a where id = 10),
#        (SELECT b.rowid AS dst FROM Student b)
#), shortestpath_cte as (
#SELECT src, dst, shortestpathoperator(src, dst, 'pairs') as path
#FROM pairs p
#WHERE p.src between (SELECT CSR_OPERATOR(
#                             (SELECT count(a.id) as v_size FROM Student a),
#                             (SELECT count(k.src) as e_size from know k),
#                               a.rowid,
#                               c.rowid,
#                               k.rowid,
#                               t.cnt) FROM Know k
#                                           JOIN student a on a.id = k.src
#                                           JOIN student c on c.id = k.dst
#                                           JOIN (SELECT count(k.src) cnt, a.rowid as a_rowid
#                                                   FROM student a
#                                                  LEFT JOIN know k ON k.src = a.id
#                                                  GROUP BY a.rowid) t
#                                              ON t.a_rowid = a.rowid) and p.dst)
#SELECT src, dst, src.id as src_id, path FROM shortestpath_cte
#JOIN student src on src = rowid
#ORDER BY dst;
#----
#0	0	10	[0]
#0	1	10	NULL
#0	2	10	[0, 1, 2]
#0	3	10	NULL
#
#

#query III
#SELECT *, shortestpathoperator(src, dst, 'pair') as path
#FROM pair AS p
#WHERE p.src BETWEEN (SELECT CSR_OPERATOR(
#            (SELECT count(a.id) as v_size FROM Student a),
#            (SELECT count(k.src) as e_size from know k),
#              a.rowid,
#              c.rowid,
#              k.rowid,
#              t.cnt)    FROM Know k
#                          JOIN student a on a.id = k.src
#                          JOIN student c on c.id = k.dst
#                          JOIN (SELECT count(k.src) cnt, a.rowid as a_rowid
#                                  FROM student a
#                                 LEFT JOIN know k ON k.src = a.id
#                                 GROUP BY a.rowid) t
#                             ON t.a_rowid = a.rowid) AND p.dst;
#----
#0	1	NULL
#1	2	[1, 3, 0, 1, 2]
#2	0	[2, 4, 0]

#
#
#
#statement ok
#import database 'duckdb-pgq/data/SNB0.003';
#
#statement ok
#select setseed(0.42)
#
#statement ok
#CREATE OR REPLACE TABLE pairs2 AS (
#    SELECT src, dst
#    FROM (SELECT a.rowid AS src FROM Person a),
#        (SELECT b.rowid AS dst FROM Person b)
#    USING SAMPLE reservoir(2 ROWS) REPEATABLE (300)
#);
#
#query III
#SELECT *, shortestpathoperator(src, dst, 'pairs2') as length
#FROM pairs2 AS p
#WHERE p.src BETWEEN (SELECT CSR_OPERATOR(
#            (SELECT count(a.id) as v_size FROM Person a),
#            (SELECT count(k.Person1Id) as e_size FROM Person_knows_Person k),
#            a.rowid,
#            c.rowid,
#            k.rowid,
#            t.cnt)    FROM Person_knows_Person k
#                        JOIN Person a on a.id = k.Person1Id
#                        JOIN Person c on c.id = k.Person2Id
#                        JOIN (SELECT count(k.Person1Id) cnt, a.rowid as a_rowid
#                                FROM Person a
#                                LEFT JOIN Person_knows_Person k ON k.Person1Id = a.id
#                                GROUP BY a.rowid) t
#                            ON t.a_rowid = a.rowid) AND p.dst;
#----
#42	22	NULL
#3	33	[3, 13, 26, 64, 33]
#
#query III
#SELECT *, iterativelengthoperator(src, dst, 'pairs2') as length
#FROM pairs2 AS p
#WHERE p.src BETWEEN (SELECT CSR_OPERATOR(
#            (SELECT count(a.id) as v_size FROM Person a),
#            (SELECT count(k.Person1Id) as e_size FROM Person_knows_Person k),
#            a.rowid,
#            c.rowid,
#            k.rowid,
#            t.cnt)    FROM Person_knows_Person k
#                        JOIN Person a on a.id = k.Person1Id
#                        JOIN Person c on c.id = k.Person2Id
#                        JOIN (SELECT count(k.Person1Id) cnt, a.rowid as a_rowid
#                                FROM Person a
#                                LEFT JOIN Person_knows_Person k ON k.Person1Id = a.id
#                                GROUP BY a.rowid) t
#                            ON t.a_rowid = a.rowid) AND p.dst;
#----
#42	22	NULL
#3	33	2
#
#statement ok
#CREATE OR REPLACE TABLE pairs3 AS (
#    SELECT src, dst
#    FROM (SELECT a.rowid AS src FROM Person a),
#        (SELECT b.rowid AS dst FROM Person b)
#    USING SAMPLE reservoir(1 ROWS) REPEATABLE (300)
#);
#
#query II
#from pairs3;
#----
#10	2
#
#query III
#SELECT *, iterativelengthoperator(src, dst, 'pairs3') as length
#FROM pairs3 as p
#WHERE p.src BETWEEN (SELECT CSR_OPERATOR(
#            (SELECT count(a.id) as v_size FROM Person a),
#            (SELECT count(k.Person1Id) as e_size FROM Person_knows_Person k),
#            a.rowid,
#            c.rowid,
#            k.rowid,
#            t.cnt)    FROM Person_knows_Person k
#                        JOIN Person a on a.id = k.Person1Id
#                        JOIN Person c on c.id = k.Person2Id
#                        JOIN (SELECT count(k.Person1Id) cnt, a.rowid as a_rowid
#                                FROM Person a
#                                LEFT JOIN Person_knows_Person k ON k.Person1Id = a.id
#                                GROUP BY a.rowid) t
#                            ON t.a_rowid = a.rowid) AND p.dst;
#----
#10	2	NULL
#
#statement ok
#CREATE OR REPLACE TABLE Student(id BIGINT, name VARCHAR); INSERT INTO Student VALUES (0, 'Daniel'), (1, 'Tavneet'), (2, 'Gabor'), (3, 'Peter'), (4, 'David');
#
#statement ok
#CREATE OR REPLACE TABLE know(src BIGINT, dst BIGINT, createDate BIGINT); INSERT INTO know VALUES (0,1, 10), (0,2, 11), (0,3, 12), (3,0, 13), (1,2, 14), (1,3, 15), (2,3, 16), (4,3, 17);
#
#query III
#WITH pairs as (
#    SELECT src, dst
#    FROM (SELECT a.rowid AS src FROM Student a),
#        (SELECT b.rowid AS dst FROM Student b)
#)
#SELECT src, dst, shortestpathoperator(src, dst, 'pairs') as path
#FROM pairs p
#WHERE p.src BETWEEN (SELECT CSR_OPERATOR(
#            (SELECT count(a.id) as v_size FROM Student a),
#            (SELECT count(k.src) as e_size from know k),
#              a.rowid,
#              c.rowid,
#              k.rowid,
#              t.cnt)    FROM Know k
#                          JOIN student a on a.id = k.src
#                          JOIN student c on c.id = k.dst
#                          JOIN (SELECT count(k.src) cnt, a.rowid as a_rowid
#                                  FROM student a
#                                 LEFT JOIN know k ON k.src = a.id
#                                 GROUP BY a.rowid) t
#                             ON t.a_rowid = a.rowid) AND p.dst;
#----
#0	0	[0]
#0	1	[0, 0, 1]
#0	2	[0, 1, 2]
#0	3	[0, 2, 3]
#0	4	NULL
#1	1	[1]
#1	2	[1, 4, 2]
#1	3	[1, 5, 3]
#1	4	NULL
#2	2	[2]
#2	3	[2, 6, 3]
#2	4	NULL
#3	3	[3]
#3	4	NULL
#4	4	[4]