# name: test/sql/path_finding/path_finding_sf1_snb.test
# description:
# group: [duckpgq_sql_path_finding]

require duckpgq

statement ok
CREATE OR REPLACE TABLE Person(creationDate TIMESTAMP, id BIGINT, firstName VARCHAR, lastName VARCHAR, gender VARCHAR, birthday TIMESTAMP, locationIP VARCHAR, browserUsed VARCHAR, "language" VARCHAR, email VARCHAR);

statement ok
COPY Person FROM '/Users/dljtw/git/duckpgq-experiments/data/SNB1-projected|/person.csv' (FORMAT 'csv', quote '"', HEADER 'true', DELIMITER '|');

statement ok
CREATE TABLE Person_knows_Person(creationDate TIMESTAMP, Person1Id BIGINT, Person2Id BIGINT);

statement ok
COPY Person_knows_Person FROM '/Users/dljtw/git/duckpgq-experiments/data/SNB1-projected|/person_knows_person.csv' (FORMAT 'csv', quote '"', HEADER 'true', DELIMITER '|');

statement ok
set experimental_path_finding_operator=true;

statement ok
create or replace table snb_pairs as (
           select src, dst
           from (select a.rowid as src from person a),
                (select b.rowid as dst from person b)
           using sample reservoir(2048 rows) repeatable (300)
        );

query III nosort pair2048
set threads=1; with csr_cte as (
        SELECT cast(min(create_csr_edge(
                0,
                (SELECT count(a.id) FROM person a),
                CAST (
                    (SELECT sum(create_csr_vertex(
                        0,
                        (SELECT count(a.id) FROM person a),
                        sub.dense_id,
                        sub.cnt))
                    FROM (
                        SELECT a.rowid as dense_id, count(k.person1id) as cnt
                        FROM person a
                        LEFT JOIN person_knows_person k ON k.person1id = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
                a.rowid,
                c.rowid,
                k.rowid)) as bigint) as csr_id
            FROM person_knows_person k
            JOIN person a on a.id = k.person1id
            JOIN person c on c.id = k.person2id)
        SELECT src as source, dst as destination, shortestpathoperator(src, dst, csr_id) as path FROM snb_pairs, csr_cte;

query III nosort pairs2048
set threads=8;with csr_cte as (
        SELECT cast(min(create_csr_edge(
                0,
                (SELECT count(a.id) FROM person a),
                CAST (
                    (SELECT sum(create_csr_vertex(
                        0,
                        (SELECT count(a.id) FROM person a),
                        sub.dense_id,
                        sub.cnt))
                    FROM (
                        SELECT a.rowid as dense_id, count(k.person1id) as cnt
                        FROM person a
                        LEFT JOIN person_knows_person k ON k.person1id = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
                a.rowid,
                c.rowid,
                k.rowid)) as bigint) as csr_id
            FROM person_knows_person k
            JOIN person a on a.id = k.person1id
            JOIN person c on c.id = k.person2id)
        SELECT src as source, dst as destination, shortestpathoperator(src, dst, csr_id) as path FROM snb_pairs, csr_cte;

query III nosort lengthpairs2048
set threads=1; with csr_cte as (
        SELECT cast(min(create_csr_edge(
                0,
                (SELECT count(a.id) FROM person a),
                CAST (
                    (SELECT sum(create_csr_vertex(
                        0,
                        (SELECT count(a.id) FROM person a),
                        sub.dense_id,
                        sub.cnt))
                    FROM (
                        SELECT a.rowid as dense_id, count(k.person1id) as cnt
                        FROM person a
                        LEFT JOIN person_knows_person k ON k.person1id = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
                a.rowid,
                c.rowid,
                k.rowid)) as bigint) as csr_id
            FROM person_knows_person k
            JOIN person a on a.id = k.person1id
            JOIN person c on c.id = k.person2id)
        SELECT src as source, dst as destination, iterativelengthoperator(src, dst, csr_id) as path FROM snb_pairs, csr_cte;

query III nosort lengthpairs2048
set threads=8;with csr_cte as (
        SELECT cast(min(create_csr_edge(
                0,
                (SELECT count(a.id) FROM person a),
                CAST (
                    (SELECT sum(create_csr_vertex(
                        0,
                        (SELECT count(a.id) FROM person a),
                        sub.dense_id,
                        sub.cnt))
                    FROM (
                        SELECT a.rowid as dense_id, count(k.person1id) as cnt
                        FROM person a
                        LEFT JOIN person_knows_person k ON k.person1id = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
                a.rowid,
                c.rowid,
                k.rowid)) as bigint) as csr_id
            FROM person_knows_person k
            JOIN person a on a.id = k.person1id
            JOIN person c on c.id = k.person2id)
        SELECT src as source, dst as destination, iterativelengthoperator(src, dst, csr_id) as path FROM snb_pairs, csr_cte;
