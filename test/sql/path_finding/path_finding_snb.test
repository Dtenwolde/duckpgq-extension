

require duckpgq

statement ok
set experimental_path_finding_operator=true;

statement ok
select setseed(0.42);

statement ok
import database '/Users/dljtw/git/duckpgq/duckdb/data/SNB0.003';

# many pair test
statement ok
create or replace table snb_many_pairs as (
   select src, dst
   from (select a.rowid as src from person a),
        (select b.rowid as dst from person b)
   using sample reservoir(2500 rows) repeatable (300)
   UNION ALL
   select src, dst
      from (select a.rowid as src from person a),
           (select b.rowid as dst from person b)
      using sample reservoir(2500 rows) repeatable (300)
   UNION ALL
   select src, dst
   from (select a.rowid as src from person a),
        (select b.rowid as dst from person b)
   using sample reservoir(2500 rows) repeatable (300)
);

query I
with csr_cte as (
SELECT cast(min(create_csr_edge(
        0,
        (SELECT count(a.id) FROM person a),
        CAST (
            (SELECT sum(create_csr_vertex(
                0,
                (SELECT count(a.id) FROM person a),
                sub.dense_id,
                sub.cnt))
            FROM (
                SELECT a.rowid as dense_id, count(k.person1id) as cnt
                FROM person a
                LEFT JOIN person_knows_person k ON k.person1id = a.id
                GROUP BY a.rowid) sub
            )
        AS BIGINT),
        (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
        a.rowid,
        c.rowid,
        k.rowid)) as bigint) as csr_id
    FROM person_knows_person k
    JOIN person a on a.id = k.person1id
    JOIN person c on c.id = k.person2id)
Select count(*) from (SELECT src, dst, shortestpathoperator(src, dst, csr_id) FROM snb_many_pairs, csr_cte);
----
7500