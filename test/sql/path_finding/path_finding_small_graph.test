

require duckpgq

statement ok
set experimental_path_finding_operator=true;

statement ok
CREATE TABLE person(id BIGINT);

statement ok
CREATE TABLE person_knows_person(person1id BIGINT, person2id BIGINT);

statement ok
INSERT INTO person(id) VALUES
(0), (1), (2), (3), (4), (5), (6), (7), (8), (9);

statement ok
INSERT INTO person_knows_person(person1id, person2id) VALUES
(0, 1), (1, 2), (2, 3), (3, 4), (4, 5),
(5, 6), (6, 7), (7, 8), (8, 9), (9, 0), -- Circular connections
(0, 2), (1, 3), (2, 4), (3, 5), (4, 6),
(5, 7), (6, 8), (7, 9), (8, 0), (9, 1); -- Additional connections

statement ok
CREATE TABLE pairs(src BIGINT, dst BIGINT);

statement ok
INSERT INTO pairs(src, dst) VALUES
    (0,5), (1,6), (2,7), (3,8), (4,9), -- Extended connections
    (5,0), (6,1), (7,2), (8,3), (9,4), -- Reverse extended connections
    (0,6), (1,7), (2,8), (3,9), (4,0), -- Wrap-around extended connections
    (5,9), (6,8), (7,6), (8,4), (9,2), -- Random backward connections
    (1,0), (3,1), (5,2), (7,3), (9,4), -- Random forward connections
    (2,9), (4,8), (6,7), (8,6), (0,7), -- Cross connections
    (0,8), (1,9), (2,0), (3,1), (4,2), -- Skip-step connections
    (5,3), (6,4), (7,5), (8,6), (9,7), -- Another skip-step pattern
    (9,0), (8,1), (7,2), (6,3), (5,4), -- Reverse skip-step connections
    (0,9), (1,8), (2,7), (3,6), (4,5); -- Reverse random connections

query III nosort pairs
with csr_cte as (
SELECT cast(min(create_csr_edge(
        0,
        (SELECT count(a.id) FROM person a),
        CAST (
            (SELECT sum(create_csr_vertex(
                0,
                (SELECT count(a.id) FROM person a),
                sub.dense_id,
                sub.cnt))
            FROM (
                SELECT a.rowid as dense_id, count(k.person1id) as cnt
                FROM person a
                LEFT JOIN person_knows_person k ON k.person1id = a.id
                GROUP BY a.rowid) sub
            )
        AS BIGINT),
        (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
        a.rowid,
        c.rowid,
        k.rowid)) as bigint) as csr_id
    FROM person_knows_person k
    JOIN person a on a.id = k.person1id
    JOIN person c on c.id = k.person2id)
SELECT src, dst, shortestpathoperator(src, dst, csr_id) FROM pairs, csr_cte;

query III nosort pairs
WITH cte1 AS (
        SELECT  CREATE_CSR_EDGE(
                0,
                (SELECT count(a.id) FROM person a),
                CAST (
                    (SELECT sum(CREATE_CSR_VERTEX(
                                0,
                                (SELECT count(a.id) FROM person a),
                                sub.dense_id,
                                sub.cnt)
                                )
                    FROM (
                        SELECT a.rowid as dense_id, count(k.person1id) as cnt
                        FROM person a
                        LEFT JOIN person_knows_person k ON k.person1id = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count(*) from person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
                a.rowid,
                c.rowid,
                k.rowid) as temp
        FROM person_knows_person k
        JOIN person a on a.id = k.person1id
        JOIN person c on c.id = k.person2id
    ) SELECT src as source, dst as destination, shortestpath(0, (select count(*) from person), pairs.src, pairs.dst) as path
            FROM pairs, (select count(cte1.temp) * 0 as temp from cte1) __x
            WHERE __x.temp * 0 = 0;