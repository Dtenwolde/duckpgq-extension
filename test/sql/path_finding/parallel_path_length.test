

require duckpgq

statement ok
set experimental_path_finding_operator=true;

statement ok
select setseed(0.42);

statement ok
set threads=1;

query I
SELECT current_setting('experimental_path_finding_operator');
----
true

statement ok
CREATE TABLE pair(src BIGINT, dst BIGINT); INSERT INTO pair(src, dst) VALUES (0, 1), (1, 2), (2,0);

statement ok
create table student(id INT); INSERT INTO student(id) VALUES (10), (20), (30), (40);

statement ok
create table know(src INT, dst INT); INSERT INTO know(src, dst) VALUES (40, 20), (10,30), (10,10), (20,10), (30,10);

query III
with csr_cte as (
SELECT cast(min(create_csr_edge(
        0,
        (SELECT count(a.id) FROM Student a),
        CAST (
            (SELECT sum(create_csr_vertex(
                0,
                (SELECT count(a.id) FROM Student a),
                sub.dense_id,
                sub.cnt))
            FROM (
                SELECT a.rowid as dense_id, count(k.src) as cnt
                FROM Student a
                LEFT JOIN Know k ON k.src = a.id
                GROUP BY a.rowid) sub
            )
        AS BIGINT),
        (select count() FROM Know k JOIN student a on a.id = k.src JOIN student c on c.id = k.dst),
        a.rowid,
        c.rowid,
        k.rowid)) as bigint) as csr_id
    FROM Know k
    JOIN student a on a.id = k.src
    JOIN student c on c.id = k.dst)
SELECT src, dst, iterativelengthoperator(src, dst, csr_id) FROM pair, csr_cte;
----
0	1	NULL
1	2	2
2	0	1

statement ok
import database '/Users/dljtw/git/duckpgq/duckdb/data/SNB0.003';

statement ok
create or replace table snb_pairs as (
   select src, dst
   from (select a.rowid as src from person a),
        (select b.rowid as dst from person b)
   using sample reservoir(50 rows) repeatable (300)
);

query III
with csr_cte as (
SELECT cast(min(create_csr_edge(
        0,
        (SELECT count(a.id) FROM person a),
        CAST (
            (SELECT sum(create_csr_vertex(
                0,
                (SELECT count(a.id) FROM person a),
                sub.dense_id,
                sub.cnt))
            FROM (
                SELECT a.rowid as dense_id, count(k.person1id) as cnt
                FROM person a
                LEFT JOIN person_knows_person k ON k.person1id = a.id
                GROUP BY a.rowid) sub
            )
        AS BIGINT),
        (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
        a.rowid,
        c.rowid,
        k.rowid)) as bigint) as csr_id
    FROM person_knows_person k
    JOIN person a on a.id = k.person1id
    JOIN person c on c.id = k.person2id)
SELECT src, dst, iterativelengthoperator(src, dst, csr_id) FROM snb_pairs, csr_cte;
----
41	7	NULL
0	1	NULL
14	2	NULL
11	15	NULL
6	5	NULL
24	39	NULL
9	10	NULL
2	15	NULL
27	39	NULL
12	15	NULL
9	29	NULL
4	24	NULL
35	31	NULL
30	10	NULL
34	15	NULL
49	8	NULL
32	12	NULL
40	17	NULL
31	11	NULL
42	30	NULL
25	44	2
39	31	NULL
0	22	NULL
32	27	NULL
15	21	NULL
15	14	NULL
31	42	NULL
3	16	NULL
40	21	NULL
10	43	2
8	41	NULL
20	15	NULL
2	37	NULL
47	25	NULL
4	48	NULL
46	21	NULL
8	13	NULL
43	31	NULL
37	25	NULL
0	39	3
5	26	1
5	43	2
44	35	NULL
3	27	2
30	13	NULL
9	15	NULL
0	46	2
2	30	3
41	48	NULL
45	9	NULL


query III
with csr_cte as (
SELECT cast(min(create_csr_edge(
        0,
        (SELECT count(a.id) FROM person a),
        CAST (
            (SELECT sum(create_csr_vertex(
                0,
                (SELECT count(a.id) FROM person a),
                sub.dense_id,
                sub.cnt))
            FROM (
                SELECT a.rowid as dense_id, count(k.person1id) as cnt
                FROM person a
                LEFT JOIN person_knows_person k ON k.person1id = a.id
                GROUP BY a.rowid) sub
            )
        AS BIGINT),
        (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
        a.rowid,
        c.rowid,
        k.rowid)) as bigint) as csr_id
    FROM person_knows_person k
    JOIN person a on a.id = k.person1id
    JOIN person c on c.id = k.person2id)
SELECT src, dst, iterativelengthoperator(src, dst, csr_id) FROM snb_pairs, csr_cte where src < 10;
----
0	1	NULL
6	5	NULL
9	10	NULL
2	15	NULL
9	29	NULL
4	24	NULL
0	22	NULL
3	16	NULL
8	41	NULL
2	37	NULL
4	48	NULL
8	13	NULL
0	39	3
5	26	1
5	43	2
3	27	2
9	15	NULL
0	46	2
2	30	3

# 0 pair test
statement ok
create or replace table snb_zero_pairs as (
   select src, dst
   from (select a.rowid as src from person a),
        (select b.rowid as dst from person b)
   using sample reservoir(0 rows) repeatable (300)
);

query III
with csr_cte as (
SELECT cast(min(create_csr_edge(
        0,
        (SELECT count(a.id) FROM person a),
        CAST (
            (SELECT sum(create_csr_vertex(
                0,
                (SELECT count(a.id) FROM person a),
                sub.dense_id,
                sub.cnt))
            FROM (
                SELECT a.rowid as dense_id, count(k.person1id) as cnt
                FROM person a
                LEFT JOIN person_knows_person k ON k.person1id = a.id
                GROUP BY a.rowid) sub
            )
        AS BIGINT),
        (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
        a.rowid,
        c.rowid,
        k.rowid)) as bigint) as csr_id
    FROM person_knows_person k
    JOIN person a on a.id = k.person1id
    JOIN person c on c.id = k.person2id)
SELECT src, dst, iterativelengthoperator(src, dst, csr_id) FROM snb_zero_pairs, csr_cte;
----
